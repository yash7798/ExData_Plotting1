x<-100
x*2
getwd()
x<-matrix(1:6,2,3)
x
colMeans(x[,x(1,2)])
colMeans(x[,c(1,2)])
printmessage(x){
if(x>0)
print("Greater")
else
print("lesser")
}
printmessage<-function(x){
if(x>0)
print("Greater")
else
print("lesser")
}
printmessage(2)
printmessage<-function(x){
if(x>0)
print("Greater")
else
print("lesser")
x
}
printmessage(2)
printmessage<-function(x){
if(x>0)
print("Greater")
else
print("lesser")
invisible(x)
}
printmessage(-2)
library(datasets)
data(iris)
?iris
library(swirl)
rm(list=ls())
swirl()
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect<-sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors<-flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
saaply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes<-flags[,19:23]
?range
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals<-lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,sum)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(ele) ele[2])
sapply(flags,unique)
vapply(flags,unique,numeric(1))
ok()
vapply(flags,unique,numeric(1))
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flag$animate)
table(flags$animate)
tapply(flags$animate,flags$landmass)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length,iris$Species,mean)
data("mtcars")
?mtcars
head(mtcars)
mean(mtcars$mpg,mtcars$cyl)
?with
with(mtcars,tapply(mpg,cyl,mean))
tapply(mtcars$mpg,mtcars$cyl,mean)
apply(mtcars,2,mean)
?mtcars
tapply(mtcars$hp,mtcars$cyl,mean)
debug(ls)
ls
a<-matrix()
exit()
n
c
?solve
a<-matrix(1:4,2,2)
a
solve(a,...)... =
solve(a,...)
solve(a)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
makeCacheMatrix(a)
makeCacheMatrix(a)
makeCacheMatrix <- function(x = matrix()) {
x<-NULL
set<-function(y){
x<<-y
inv<<-NULL
}
get<-function() x
setinv<-function(inverse) inv<<-inverse
getinv<-function() inv
list(set=set,get=get,setinv=setinv,getinv=getinv)
}
## The following function computes the inverse of the special "matrix" returned by
## makeCacheMatrix above. If the inverse has already been calculated then cacheSolve
## retrieves the inverse stored in the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
makeCacheMatrix(a)
h<-makeCacheMatrix(a)
h
cacheSolve(a)
a
setwd("~/Downloads")
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
X_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
Y_train <- read.table("./UCI HAR Dataset/train/Y_train.txt")
Y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
Y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
Sub_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
head(X_train,n=3)
X_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
Y_test <- read.table("./UCI HAR Dataset/test/Y_test.txt")
Y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
shape(X_train)
dim(X_train)
Sub_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
variable_names <- read.table("./UCI HAR Dataset/features.txt")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
X_total <- rbind(X_train, X_test)
Y_total <- rbind(Y_train, Y_test)
Sub_total <- rbind(Sub_train, Sub_test)
selected_var <- variable_names[grep("(.*)mean|(.*)std",variable_names[,2]),]
selected_var2 <- variable_names[grep("mean\\(\\)|std\\(\\)",variable_names[,2]),]
selected_var <- variable_names[grep("(.*)mean(\())|(.*)std",variable_names[,2]),]
X_total <- X_total[,selected_var2[,1]]
colnames(Y_total) <- "activity"
head(Y_total,n=2)
Y_total$activitylabel <- factor(Y_total$activity, labels = as.character(activity_labels[,2]))
head(Y_total,n=2)
activitylabel <- Y_total[,-1]
head(activitylabel,n=2)
colnames(X_total) <- variable_names[selected_var[,1],2]
colnames(X_total) <- variable_names[selected_var2[,1],2]
head(X_total,n=1)
dim(X_total)
colnames(Sub_total) <- "subject"
dim(Sub_total)
total <- cbind(X_total, activitylabel, Sub_total)
total_mean <- total %>% group_by(activitylabel, subject) %>% summarize_each(funs(mean))
library(dplyr)
total_mean <- total %>% group_by(activitylabel, subject) %>% summarize_each(funs(mean))
write.table(total_mean, file = "./UCI HAR Dataset/tidydata1.txt", row.names = FALSE, col.names = TRUE)
total_mean <- total %>% group_by(activitylabel, subjectnumber) %>% summarize_each(funs(mean))
total_mean <- total %>% group_by(activitylabel, subject) %>% summarize_each(funs(mean))
write.table(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
# 3. Uses descriptive activity names to name the activities in the data set
colnames(Y_total) <- "activitynumber"
total_mean <- total %>% group_by(activitylabel, subject) %>% summarize_each(funs(mean))
write.table(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
# 5. From the data set in step 4, creates a second, independent tidy data set with the average
# of each variable for each activity and each subject.
colnames(Subject_total) <- "subject"
total_mean <- total %>% group_by(activitylabel, subject) %>% summarize_each(funs(mean))
write.table(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
write.table(total_mean, file = "./UCI HAR Dataset/tidydata.txt", row.names = FALSE, col.names = TRUE)
library(datasets)
clear
x<-rorm
x<-rnorm(100)
x<-rnorm(100)
hist(x)
t<-rnorm(100)
plot(x,y)
plot(x,t)
par(mar=c(2,2,2,2))
plot(x,t)
par(mar=c(4,4,2,2))
plot(x,t)
plot(x,t,pch=19)
plot(x,t,pch=3)
example(points)
x<-rnorm(100)
y<-rnorm(100)
plot(x,y,pch=3)
plot(x,y,pch=20)
text(-2,-2,"label")
legend("topleft",pch=1,col="blue",bg="green",legend = "Yeah")
legend("topleft",pch=1,col="blue",legend = "Yeah")
title("Scatterplot")
title(main="Scatterplot")
title("Scatterplot")
title(main="Scatterplot")
plot(x,y,pch=20,xlabel="XXX",ylabel="YYY",main="YUOOO")
plot(x,y,pch=20,xlab="XXX",ylab="YYY",main="YUOOO")
x[1]
g<-gl(2,50)
g[1]
?gl
g<-gl(2,50,label=c("male","female"))
g == "male"
dev.cur()
setwd("~/Desktop/R_Programming/Coursera/Project1")
dataFile <- "./household_power_consumption.txt"
dev.off()
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
rm(data)
source("LoadData.R")
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
globalActivePower <- as.numeric(subSetData$Global_active_power)
setwd("~/Desktop/R_Programming/Coursera/Project1")
dataFile <- "./household_power_consumption.txt"
dev.off()
while (!is.null(dev.list()))
dev.off()
#str(subSetData)
globalActivePower <- as.numeric(subSetData$Global_active_power)
